第一步：出现背景
了解新技术出现的背景，为什么会出现，解决了什么问题，出现之前用什么方案解决，会带来什么问题，新技术使用场景，优缺点等。比如：
Spring boot出现移除繁琐的配置,简化应用开发,提升效率; 
Docker出现比LXC更轻量级，速度加快，隔离性好，方便运维和迁移，节省空间; Jdk1.5出现concurrent包更快捷，里面的BlockingQueue,CAS原子锁,ConcurrentMap,线程池,读写锁更加方便开发优美的多线程代码，在这之前自己写工具类;
设计模式使代码更加方便维护，开闭原则，模块间达到高内聚低耦合的效果。

 第二步：基本用法
掌握专用词汇, 比如HDFS的nameNode和dataNode。使用基本的语法，搭建环境，开发一个简单demo   ，比如：
Activiti流程引擎 部署，启动，审批，驳回，代办，邮件等基本功能 

 第三步：高阶用法
了解一些比较高级的用户，在某些特殊场景才会用上，比如activiti的并行网关，子流程，消息节点，复杂流程图等。

 第四步：分析源码
了解框架的实现原理，比如mybatis用动态代理生成接口实现类，Spring事物使用注解+动态代理，struts底层使用反射机制,AOP动态代理等。熟悉了底层实现，遇到问题有利于分析和解决，心里比较有底。







